/**
 * @file tpl_invoque.S
 *
 * @section descr File description
 *
 * System call user level invoque API.
 *
 * @warning this file is generated by gen_invoque.sh based on the 
 * tpl_os_service_ids.h header file.
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005+
 * Copyright ESEO for function and data structures documentation and ARM port
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $$Date$$
 * $$Rev$$
 * $$Author$$
 * $$URL$$
 */
#include "tpl_os_application_def.h"
#include "tpl_service_ids.h"

#if WITH_SYSTEM_CALL == NO
#error "This file should not be part of your project since WITH_SYSTEM_CALL is not defined"
#endif


#if WITH_MEMMAP == NO

#endif /* WITH_MEMMAP == NO */

#define API_START_SEC_CODE
#include "tpl_as_memmap.h"

	.syntax unified
	.thumb
	.extern nested_kernel_entrance_counter

	/* 
	 * Service GetActiveApplicationMode
	 */
	.global GetActiveApplicationMode
	.type   GetActiveApplicationMode, %function
GetActiveApplicationMode:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq GetActiveApplicationMode_direct_call
	/* Exception call to the service : use SVC exception */
GetActiveApplicationMode_exception_call:
	mov r3,#OSServiceId_GetActiveApplicationMode
	svc #OSServiceId_GetActiveApplicationMode
	b GetActiveApplicationMode_exit_call
	/* Procedural call to the service */
GetActiveApplicationMode_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_GetActiveApplicationMode<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
GetActiveApplicationMode_exit_call:
	bx lr
	/* 
	 * Service StartOS
	 */
	.global tpl_start_os
	.type   tpl_start_os, %function
tpl_start_os:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq StartOS_direct_call
	/* Exception call to the service : use SVC exception */
StartOS_exception_call:
	mov r3,#OSServiceId_StartOS
	svc #OSServiceId_StartOS
	b StartOS_exit_call
	/* Procedural call to the service */
StartOS_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_StartOS<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
StartOS_exit_call:
	bx lr
	/* 
	 * Service ShutdownOS
	 */
	.global ShutdownOS
	.type   ShutdownOS, %function
ShutdownOS:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ShutdownOS_direct_call
	/* Exception call to the service : use SVC exception */
ShutdownOS_exception_call:
	mov r3,#OSServiceId_ShutdownOS
	svc #OSServiceId_ShutdownOS
	b ShutdownOS_exit_call
	/* Procedural call to the service */
ShutdownOS_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ShutdownOS<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ShutdownOS_exit_call:
	bx lr
	/* 
	 * Service EnableAllInterrupts
	 */
	.global EnableAllInterrupts
	.type   EnableAllInterrupts, %function
EnableAllInterrupts:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq EnableAllInterrupts_direct_call
	/* Exception call to the service : use SVC exception */
EnableAllInterrupts_exception_call:
	mov r3,#OSServiceId_EnableAllInterrupts
	svc #OSServiceId_EnableAllInterrupts
	b EnableAllInterrupts_exit_call
	/* Procedural call to the service */
EnableAllInterrupts_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_EnableAllInterrupts<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
EnableAllInterrupts_exit_call:
	bx lr
	/* 
	 * Service DisableAllInterrupts
	 */
	.global DisableAllInterrupts
	.type   DisableAllInterrupts, %function
DisableAllInterrupts:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq DisableAllInterrupts_direct_call
	/* Exception call to the service : use SVC exception */
DisableAllInterrupts_exception_call:
	mov r3,#OSServiceId_DisableAllInterrupts
	svc #OSServiceId_DisableAllInterrupts
	b DisableAllInterrupts_exit_call
	/* Procedural call to the service */
DisableAllInterrupts_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_DisableAllInterrupts<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
DisableAllInterrupts_exit_call:
	bx lr
	/* 
	 * Service ResumeAllInterrupts
	 */
	.global ResumeAllInterrupts
	.type   ResumeAllInterrupts, %function
ResumeAllInterrupts:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ResumeAllInterrupts_direct_call
	/* Exception call to the service : use SVC exception */
ResumeAllInterrupts_exception_call:
	mov r3,#OSServiceId_ResumeAllInterrupts
	svc #OSServiceId_ResumeAllInterrupts
	b ResumeAllInterrupts_exit_call
	/* Procedural call to the service */
ResumeAllInterrupts_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ResumeAllInterrupts<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ResumeAllInterrupts_exit_call:
	bx lr
	/* 
	 * Service SuspendAllInterrupts
	 */
	.global SuspendAllInterrupts
	.type   SuspendAllInterrupts, %function
SuspendAllInterrupts:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq SuspendAllInterrupts_direct_call
	/* Exception call to the service : use SVC exception */
SuspendAllInterrupts_exception_call:
	mov r3,#OSServiceId_SuspendAllInterrupts
	svc #OSServiceId_SuspendAllInterrupts
	b SuspendAllInterrupts_exit_call
	/* Procedural call to the service */
SuspendAllInterrupts_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_SuspendAllInterrupts<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
SuspendAllInterrupts_exit_call:
	bx lr
	/* 
	 * Service ResumeOSInterrupts
	 */
	.global ResumeOSInterrupts
	.type   ResumeOSInterrupts, %function
ResumeOSInterrupts:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ResumeOSInterrupts_direct_call
	/* Exception call to the service : use SVC exception */
ResumeOSInterrupts_exception_call:
	mov r3,#OSServiceId_ResumeOSInterrupts
	svc #OSServiceId_ResumeOSInterrupts
	b ResumeOSInterrupts_exit_call
	/* Procedural call to the service */
ResumeOSInterrupts_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ResumeOSInterrupts<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ResumeOSInterrupts_exit_call:
	bx lr
	/* 
	 * Service SuspendOSInterrupts
	 */
	.global SuspendOSInterrupts
	.type   SuspendOSInterrupts, %function
SuspendOSInterrupts:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq SuspendOSInterrupts_direct_call
	/* Exception call to the service : use SVC exception */
SuspendOSInterrupts_exception_call:
	mov r3,#OSServiceId_SuspendOSInterrupts
	svc #OSServiceId_SuspendOSInterrupts
	b SuspendOSInterrupts_exit_call
	/* Procedural call to the service */
SuspendOSInterrupts_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_SuspendOSInterrupts<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
SuspendOSInterrupts_exit_call:
	bx lr
	/* 
	 * Service CallTerminateISR2
	 */
	.global CallTerminateISR2
	.type   CallTerminateISR2, %function
CallTerminateISR2:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq CallTerminateISR2_direct_call
	/* Exception call to the service : use SVC exception */
CallTerminateISR2_exception_call:
	mov r3,#OSServiceId_CallTerminateISR2
	svc #OSServiceId_CallTerminateISR2
	b CallTerminateISR2_exit_call
	/* Procedural call to the service */
CallTerminateISR2_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_CallTerminateISR2<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
CallTerminateISR2_exit_call:
	bx lr
	/* 
	 * Service ActivateTask
	 */
	.global ActivateTask
	.type   ActivateTask, %function
ActivateTask:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ActivateTask_direct_call
	/* Exception call to the service : use SVC exception */
ActivateTask_exception_call:
	mov r3,#OSServiceId_ActivateTask
	svc #OSServiceId_ActivateTask
	b ActivateTask_exit_call
	/* Procedural call to the service */
ActivateTask_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ActivateTask<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ActivateTask_exit_call:
	bx lr
	/* 
	 * Service TerminateTask
	 */
	.global TerminateTask
	.type   TerminateTask, %function
TerminateTask:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq TerminateTask_direct_call
	/* Exception call to the service : use SVC exception */
TerminateTask_exception_call:
	mov r3,#OSServiceId_TerminateTask
	svc #OSServiceId_TerminateTask
	b TerminateTask_exit_call
	/* Procedural call to the service */
TerminateTask_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_TerminateTask<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
TerminateTask_exit_call:
	bx lr
	/* 
	 * Service ChainTask
	 */
	.global ChainTask
	.type   ChainTask, %function
ChainTask:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ChainTask_direct_call
	/* Exception call to the service : use SVC exception */
ChainTask_exception_call:
	mov r3,#OSServiceId_ChainTask
	svc #OSServiceId_ChainTask
	b ChainTask_exit_call
	/* Procedural call to the service */
ChainTask_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ChainTask<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ChainTask_exit_call:
	bx lr
	/* 
	 * Service Schedule
	 */
	.global Schedule
	.type   Schedule, %function
Schedule:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq Schedule_direct_call
	/* Exception call to the service : use SVC exception */
Schedule_exception_call:
	mov r3,#OSServiceId_Schedule
	svc #OSServiceId_Schedule
	b Schedule_exit_call
	/* Procedural call to the service */
Schedule_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_Schedule<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
Schedule_exit_call:
	bx lr
	/* 
	 * Service GetTaskID
	 */
	.global GetTaskID
	.type   GetTaskID, %function
GetTaskID:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq GetTaskID_direct_call
	/* Exception call to the service : use SVC exception */
GetTaskID_exception_call:
	mov r3,#OSServiceId_GetTaskID
	svc #OSServiceId_GetTaskID
	b GetTaskID_exit_call
	/* Procedural call to the service */
GetTaskID_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_GetTaskID<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
GetTaskID_exit_call:
	bx lr
	/* 
	 * Service GetTaskState
	 */
	.global GetTaskState
	.type   GetTaskState, %function
GetTaskState:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq GetTaskState_direct_call
	/* Exception call to the service : use SVC exception */
GetTaskState_exception_call:
	mov r3,#OSServiceId_GetTaskState
	svc #OSServiceId_GetTaskState
	b GetTaskState_exit_call
	/* Procedural call to the service */
GetTaskState_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_GetTaskState<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
GetTaskState_exit_call:
	bx lr
	/* 
	 * Service CallTerminateTask
	 */
	.global CallTerminateTask
	.type   CallTerminateTask, %function
CallTerminateTask:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq CallTerminateTask_direct_call
	/* Exception call to the service : use SVC exception */
CallTerminateTask_exception_call:
	mov r3,#OSServiceId_CallTerminateTask
	svc #OSServiceId_CallTerminateTask
	b CallTerminateTask_exit_call
	/* Procedural call to the service */
CallTerminateTask_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_CallTerminateTask<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
CallTerminateTask_exit_call:
	bx lr
	/* 
	 * Service GetResource
	 */
	.global GetResource
	.type   GetResource, %function
GetResource:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq GetResource_direct_call
	/* Exception call to the service : use SVC exception */
GetResource_exception_call:
	mov r3,#OSServiceId_GetResource
	svc #OSServiceId_GetResource
	b GetResource_exit_call
	/* Procedural call to the service */
GetResource_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_GetResource<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
GetResource_exit_call:
	bx lr
	/* 
	 * Service ReleaseResource
	 */
	.global ReleaseResource
	.type   ReleaseResource, %function
ReleaseResource:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ReleaseResource_direct_call
	/* Exception call to the service : use SVC exception */
ReleaseResource_exception_call:
	mov r3,#OSServiceId_ReleaseResource
	svc #OSServiceId_ReleaseResource
	b ReleaseResource_exit_call
	/* Procedural call to the service */
ReleaseResource_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ReleaseResource<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ReleaseResource_exit_call:
	bx lr
	/* 
	 * Service SetEvent
	 */
	.global SetEvent
	.type   SetEvent, %function
SetEvent:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq SetEvent_direct_call
	/* Exception call to the service : use SVC exception */
SetEvent_exception_call:
	mov r3,#OSServiceId_SetEvent
	svc #OSServiceId_SetEvent
	b SetEvent_exit_call
	/* Procedural call to the service */
SetEvent_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_SetEvent<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
SetEvent_exit_call:
	bx lr
	/* 
	 * Service ClearEvent
	 */
	.global ClearEvent
	.type   ClearEvent, %function
ClearEvent:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq ClearEvent_direct_call
	/* Exception call to the service : use SVC exception */
ClearEvent_exception_call:
	mov r3,#OSServiceId_ClearEvent
	svc #OSServiceId_ClearEvent
	b ClearEvent_exit_call
	/* Procedural call to the service */
ClearEvent_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_ClearEvent<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
ClearEvent_exit_call:
	bx lr
	/* 
	 * Service GetEvent
	 */
	.global GetEvent
	.type   GetEvent, %function
GetEvent:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq GetEvent_direct_call
	/* Exception call to the service : use SVC exception */
GetEvent_exception_call:
	mov r3,#OSServiceId_GetEvent
	svc #OSServiceId_GetEvent
	b GetEvent_exit_call
	/* Procedural call to the service */
GetEvent_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_GetEvent<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
GetEvent_exit_call:
	bx lr
	/* 
	 * Service WaitEvent
	 */
	.global WaitEvent
	.type   WaitEvent, %function
WaitEvent:
	/* manage reentrance of kernel */
	ldr r3, =nested_kernel_entrance_counter
	ldr r3, [r3]
	cmp r3,#1 /* If nested_kernel_entrance_counter is greater or equal than 1 */
	          /* then we are in Handler mode and we must call the service with a direct call to the function */
	beq WaitEvent_direct_call
	/* Exception call to the service : use SVC exception */
WaitEvent_exception_call:
	mov r3,#OSServiceId_WaitEvent
	svc #OSServiceId_WaitEvent
	b WaitEvent_exit_call
	/* Procedural call to the service */
WaitEvent_direct_call:
	/* get the appropriate system call address into R3 */
	ldr r3, =tpl_dispatch_table
	ldr r3, [r3, #OSServiceId_WaitEvent<<2]
	/* call the service  */
	push {lr}
	blx r3
	pop {lr}
	/* Function call */
WaitEvent_exit_call:
	bx lr


#define API_STOP_SEC_CODE
#include "tpl_as_memmap.h"


/* End of file tpl_invoque.S */

